version: "3.9"

services:
  # PostgreSQL
  postgres:
    container_name: swe-postgres
    image: postgres:${POSTGRES_VERSION}
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-123456}
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-U', '${POSTGRES_USER:-postgres}' ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - swe-postgres:/var/lib/postgresql/data
    networks:
      - swe-network

  # MinIO
  minio:
    container_name: swe-minio
    image: minio/minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "9001:9001"
    volumes:
      - minio-storage:/data
    environment:
      MINIO_ACCESS_KEY: blQ3xwyhmgVSil41otTG
      MINIO_SECRET_KEY: bnlnY6BYVls7BVOIAhj7LUKF5htiTRkJG4RhdMQJ
    command: server --console-address ":9001" /data
    healthcheck:
      test: [ 'CMD', 'curl', '--silent', '--fail', 'http://localhost:9000/minio/health/live' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swe-network

  # Redis
  redis:
    container_name: swe-redis
    image: redis:${REDIS_VERSION}
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --loglevel warning
    healthcheck:
      test: [ 'CMD-SHELL', 'redis-cli ping | grep PONG' ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - swe-network

  # Zookeeper
  zookeeper:
    image: debezium/zookeeper:${DEBEZIUM_VERSION}
    container_name: swe-zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    environment:
      SERVER_ID: "1"
      SERVER_COUNT: "1"
      LOG_LEVEL: "WARN"
    healthcheck:
      test: [ 'CMD', 'echo', 'stat', '|', 'nc', 'localhost', '2181' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swe-network

  # Kafka
  kafka:
    image: debezium/kafka:${DEBEZIUM_VERSION}
    container_name: swe-kafka
    restart: unless-stopped
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT:-9092}:9092"
      - "29092:29092"
    environment:
      NODE_ID: "1"
      ZOOKEEPER_CONNECT: "swe-zookeeper:2181"
      LOG_LEVEL: "WARN"
      KAFKA_LOG_RETENTION_HOURS: "1"
      KAFKA_LISTENERS: "PLAINTEXT://swe-kafka:29092,PLAINTEXT_HOST://swe-kafka:9092"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://swe-kafka:29092,PLAINTEXT_HOST://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      CREATE_TOPICS: "debezium_connect_config:1:1:compact,debezium_connect_offsets:1:1:compact,debezium_connect_status:1:1:compact"
    healthcheck:
      test: [ 'CMD', './bin/kafka-topics.sh', '--list', '--bootstrap-server', 'swe-kafka:29092' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swe-network

  # Kafka UI
  kafka-ui:
    container_name: swe-kafka-ui
    image: tchiotludo/akhq:0.24.0
    restart: unless-stopped
    ports:
      - "8088:8080"
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "swe-kafka:29092"
          ui-options:
            topic-data:
              sort: NEWEST
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - swe-network

  # Debezium
  debezium:
    image: debezium/connect:${DEBEZIUM_VERSION}
    container_name: swe-debezium
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "${DEBEZIUM_PORT:-8083}:8083"
    environment:
      BOOTSTRAP_SERVERS: "swe-kafka:29092"
      GROUP_ID: "1"
      CONFIG_STORAGE_TOPIC: "debezium_connect_config"
      OFFSET_STORAGE_TOPIC: "debezium_connect_offset"
      STATUS_STORAGE_TOPIC: "debezium_connect_status"
      LOG_LEVEL: "WARN"
    healthcheck:
      test: [ 'CMD', 'curl', '--silent', '--fail', 'http://localhost:8083/connectors' ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swe-network

  # Debezium UI
  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: swe-debezium-ui
    restart: unless-stopped
    ports:
      - "6969:8080"
    environment:
      KAFKA_CONNECT_URIS: "http://swe-debezium:8083"
    depends_on:
      debezium:
        condition: service_healthy
    networks:
      - swe-network

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:${KEYCLOAK_VERSION}
    container_name: swe-keycloak
    ports:
      - "${KEYCLOAK_PORT:-8080}:8080"
      - "8443:8443"
    command: start-dev
    environment:
      JAVA_OPTS_APPEND: -Dkeycloak.profile.feature.upload_scripts=enabled
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://swe-postgres:5432/SweKeycloak
      KC_DB_USERNAME: ${POSTGRES_USER:-postgres}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD:-123456}
      KC_DB_SCHEMA: swekeycloak
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8080
      KC_HOSTNAME_STRICT: "false"
      KC_HOSTNAME_STRICT_HTTPS: "false"
      KC_LOG_LEVEL: info
      KC_METRICS_ENABLED: "true"
      KC_HEALTH_ENABLED: "true"
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-admin}
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ 'CMD', 'curl', '--silent', '--fail', 'http://localhost:8080/realms/master' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swe-network

volumes:
  swe-postgres:
    driver: local
  minio-storage: { }

networks:
  swe-network:
    driver: bridge